# README FIRST
# 1. replace "NAMESPACE" and "COLLECTION_NAME" with the correct name in the env section (e.g. with 'community' and 'mycollection')
# 2. If you don't have unit tests remove that section
# 3. If your collection depends on other collections ensure they are installed, see "Install collection dependencies"
# If you need help please ask in #ansible-community on the Libera.chat IRC network

name: CI (Windows)
on:
  # Manual triggers
  workflow_dispatch:
  # Run CI against all pushes (direct commits, also merged PRs), Pull Requests
  push:
    branches:
      - main
      - stable-*
  pull_request:
  # Run CI once per day (at 06:00 UTC)
  # This ensures that even if there haven't been commits that we are still testing against latest version of ansible-test for each ansible-base version
  schedule:
    - cron: '0 6 * * *'

env:
  NAMESPACE: lowlydba
  COLLECTION_NAME: sqlserver

jobs:

###
# Sanity tests (REQUIRED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html

  # sanity:
  #   name: Sanity (Ⓐ${{ matrix.ansible }})
  #   strategy:
  #     matrix:
  #       ansible:
  #         # It's important that Sanity is tested against all stable-X.Y branches
  #         # Testing against `devel` may fail as new tests are added.
  #       # - stable-2.9
  #         - stable-2.10
  #         - stable-2.11
  #         - stable-2.12
  #         - devel
  #   runs-on: ubuntu-latest
  #   steps:

  #     # ansible-test requires the collection to be in a directory in the form
  #     # .../ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/

  #     - name: Check out code
  #       uses: actions/checkout@v2
  #       with:
  #         path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         # it is just required to run that once as "ansible-test sanity" in the docker image
  #         # will run on all python versions it supports.
  #         python-version: 3.8

  #     # Install the head of the given branch (devel, stable-2.10)
  #     - name: Install ansible-base (${{ matrix.ansible }})
  #       run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

  #     # run ansible-test sanity inside of Docker.
  #     # The docker container has all the pinned dependencies that are required
  #     # and all python versions ansible supports.
  #     - name: Run sanity tests
  #       run: ansible-test sanity --docker -v --color --coverage
  #       working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

  #     # ansible-test support producing code coverage date
  #     - name: Generate coverage report
  #       run: ansible-test coverage xml -v --requirements --group-by command --group-by version
  #       working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

  #     # See the reports at https://codecov.io/gh/lowlydba/lowlydba.sqlserver
  #     - uses: codecov/codecov-action@v1
  #       with:
  #         fail_ci_if_error: false

###
# Unit tests (OPTIONAL)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_units.html
#
# Skipping - Unit tests for Powershell/Windows modules not supported currently:
# https://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general_windows.html#windows-unit-testing
  # units:
  #   runs-on: ubuntu-latest
  #   name: Units (Ⓐ${{ matrix.ansible }})
  #   strategy:
  #     # As soon as the first unit test fails, cancel the others to free up the CI queue
  #     fail-fast: true
  #     matrix:
  #       ansible:
  #         # - stable-2.9 # Only if your collection supports Ansible 2.9
  #         - stable-2.10
  #         - stable-2.11
  #         - stable-2.12
  #         - devel

  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2
  #       with:
  #         path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         # it is just required to run that once as "ansible-test units" in the docker image
  #         # will run on all python versions it supports.
  #         python-version: 3.8

  #     - name: Install ansible-base (${{ matrix.ansible }})
  #       run: pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

  #     # OPTIONAL If your unit test requires Python libraries from other collections
  #     # Install them like this
  #     - name: Install collection dependencies
  #       run: ansible-galaxy collection install ansible.netcommon ansible.utils -p .

  #     # Run the unit tests
  #     - name: Run unit test
  #       run: ansible-test units -v --color --docker --coverage
  #       working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

  #     # ansible-test support producing code coverage date
  #     - name: Generate coverage report
  #       run: ansible-test coverage xml -v --requirements --group-by command --group-by version
  #       working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

  #     # See the reports at https://codecov.io/gh/lowlydba/lowlydba.sqlserver
  #     - uses: codecov/codecov-action@v1
  #       with:
  #         fail_ci_if_error: false

###
# Integration tests (RECOMMENDED)
#
# https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html


# If the application you are testing is available as a docker container and you want to test
# multiple versions see the following for an example:
# https://github.com/ansible-collections/community.zabbix/tree/master/.github/workflows

  integration:
    runs-on: windows-2019
    name: I (Ⓐ${{ matrix.ansible }}+py${{ matrix.python }})
    # services:
    #   sqlserver:
    #     image: mcr.microsoft.com/mssql/server:2019-latest
    #     ports:
    #       - 1433:1433
    #     env:
    #       ACCEPT_EULA: 'Y'
    #       SA_PASSWORD: L0wlydb4
    strategy:
      fail-fast: false
      matrix:
        ansible:
        # - stable-2.9
          - stable-2.10
          - stable-2.11
          - stable-2.12
          - devel
        python:
        #- 2.6
        #- 2.7
        #- 3.5
        #- 3.6
        #- 3.7
         - 3.8
        #- 3.9
        exclude:
          # Because ansible-test doesn't support python3.9 for Ansible 2.9
          - ansible: stable-2.9
            python: 3.9

    defaults:
      run:
        shell: wsl-bash {0}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}

      - name: Create an admin user
        shell: cmd
        run: |
          net user admin pass123@ /add /y
          net localgroup Administrators admin /add

      - name: Set up the runner for PowerShell remoting
        shell: powershell
        run: |
          $sb = [ScriptBlock]::Create((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))
          & $sb -Verbose -ForceNewSSLCert 4>&1

      # - name: Install a SQL Server
      #   uses: potatoqualitee/mssqlsuite@v1
      #   with:
      #     install: sqlengine  #, sqlclient, sqlpackage, localdb
      #     sa-password: L0wlydb4

      - uses: Vampire/setup-wsl@v1
        with:
          distribution: Debian
          additional-packages: |
            git
            python3
            python3-pip

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     # it is just required to run that once as "ansible-test integration" in the docker image
      #     # will run on all python versions it supports.
      #     python-version: 3.8
      - name: Get Linux workspace path
        shell: pwsh
        run: |
          Add-Content -LiteralPath $env:GITHUB_ENV -Value "GHWS=$(wslpath --% -u -a "${{ github.workspace }}")"

      - name: Install ansible-base (${{ matrix.ansible }})
        run: |
          python3 -m pip install --upgrade pip setuptools --disable-pip-version-check
          python3 -m pip install https://github.com/ansible/ansible/archive/${{ matrix.ansible }}.tar.gz --disable-pip-version-check

      # # OPTIONAL If your integration test requires Python libraries or modules from other collections
      # # Install them like this
      - name: Install collection dependencies
        run: ansible-galaxy collection install ansible.windows -p "$GHWS"

      - name: Set integration test options
        shell: bash
        working-directory: ./ansible_collections/${{env.NAMESPACE}}/${{env.COLLECTION_NAME}}/tests/integration
        run: |
          cp integration_config.sample.yml integration_config.yml
          cp inventory.winrm.ci inventory.winrm

      # Run the integration tests
      - name: Run integration test
        run: ansible-test windows-integration -v --color --retry-on-error --continue-on-error --diff --coverage --requirements
        working-directory: ${{ env.GHWS }}

      # ansible-test support producing code coverage date
      - name: Generate coverage report
        run: ansible-test coverage xml -v --requirements --group-by command --group-by version
        working-directory: ${{ env.GHWS }}

      # See the reports at https://codecov.io/gh/lowlydba/lowlydba.sqlserver
      - uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false
